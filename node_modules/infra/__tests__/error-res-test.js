/**
 * Created by kyle on 30/3/16.
 */

/**
 * Created by kyle on 26/3/16.
 */
jest.unmock('../error-res');
var logger = require('utils/logger');
var errReason = require('infra/error-reason');

describe('node_modules/infra/error-res.js', function(){

    it('should be able to create fully functional error res object', function() {
        var ErrorRes = require('../error-res');
        var errRes = new ErrorRes('NAME', 'message', 500);

        expect(errRes.error_name).toEqual('NAME');
        expect(errRes.error_message).toEqual('message');
        expect(errRes.status_code).toEqual(500);
        expect(errRes.errors).toBeUndefined();
        expect(errRes.hasError()).toBeFalsy();
/**/
        errRes.putError('field',errReason.INVALID_FORMAT);
        expect(errRes.hasError()).toBeTruthy();
        expect(errRes.errors[0]).toEqual({field: 'field', reason : errReason.INVALID_FORMAT });
    });



    it('should enable send back with respnose ', function() {
        var ErrorRes = require('../error-res');
        var errRes = new ErrorRes('NAME', 'message', 500);
        errRes.putError('field',errReason.INVALID_FORMAT);

        var res = {
            status: jest.genMockFunction(),
            send : jest.genMockFunction()
        };

        errRes.sendWith(res);
        expect(res.status).toBeCalledWith(500);
        expect(res.send).toBeCalledWith(errRes);

    });
} );
