/**
 * Created by kyle on 19/4/16.
 */

var winston = require('winston');
var PrettyError = require('pretty-error');
var config = require('utils/config');
var ROOT_PATH_LENGTH = process.cwd().length;

//The logger also emits an 'error' event which you should handle or suppress if you don't want unhandled exceptions.
//We choose to not suppress error here (the error will later be handled by exceptionHandlers)
winston.emitErrs = true;

/**
 * Pre-define Winston & its transport. For now, every winston log comment will be written to both File & Console.
 * For more about Winston transport, read https://github.com/winstonjs/winston/blob/master/docs/transports.md
 */
var logger = new winston.Logger({
    transports: [
        new winston.transports.File({
            filename: 'logs/all-logs.log',
            maxsize: 5242880, //5MB
            maxFiles: 5,
            level: config.log_level,
            timestamp: getCurrentTime,
            json: true,
            colorize: false,
            formatter: customFileFormatter
        }),
        new winston.transports.Console({
            level: config.log_level,
            timestamp: getCurrentTime,
            json: false,
            colorize: true,
            formatter: customFileFormatter,
            prettyPrint: true
        })
    ],
    exceptionHandlers: [
        new winston.transports.File({
            filename: 'logs/error.log'
        })
    ],

    // Not exit after logging an uncaughtException.
    exitOnError: false
});

//WRITEME - why do we need this?
logger.stream = {
    write: function (message, encoding) {
        logger.info(message);
    }
};

//Enable Pretty Error Logging
var pe = new PrettyError();
// we can optionally configure prettyError to simplify the stack trace:
pe.skipNodeFiles(); // this will skip events.js and http.js and similar core node files
pe.skipPackage('express'); // this will skip all the trace lines about express` core and sub-modules

//Log errors in a more readable format.
logger.prettyError = function (err){
    if(err instanceof Error){
        logger.error(pe.render(err));
    }
};

function getCurrentTime(){

    return new Date().toISOString();
}

function customFileFormatter (options) {

    return options.timestamp() +' ' + '['+ options.level.toUpperCase() +'] '+
        (options.meta && options.meta.file ? ' [' + getRelativeFilePath(options.meta.file) + '] ': '' ) +
        (undefined !== options.message ? options.message : '');
}

function getRelativeFilePath(fullPath){

    return fullPath.substring(ROOT_PATH_LENGTH, fullPath.length);
}

module.exports = logger;
